// 
// Main website for TVRename is http://tvrename.com
// 
// Source code available at http://code.google.com/p/tvrename/
// 
// This code is released under GPLv3 http://www.gnu.org/licenses/gpl.html
// 

using System;
using System.Diagnostics.CodeAnalysis;
using TvRename.Core.Settings.Serialized;
using TvRename.TheTVDB;

// These are what is used when processing folders for missing episodes, renaming, etc. of files.

// A "ProcessedEpisode" is generated by processing an Episode from thetvdb, and merging/renaming/etc.
//
// A "ShowItem" is a show the user has added on the "My Shows" tab

// TODO: C++ to C# conversion stopped it using some of the typedefs, such as "IgnoreSeasonList".  (a) probably should
// rename that to something more generic like IntegerList, and (b) then put it back into the classes & functions
// that use it (e.g. ShowItem.IgnoreSeasons)

namespace TvRename.Core.Settings
{
    public class ProcessedEpisode : Episode
    {
        public int EpNum2; // if we are a concatenation of episodes, this is the last one in the series. Otherwise, same as EpNum
        public bool Ignore;
        public bool NextToAir;
        public int OverallNumber;
        public MyShowItem ShowItem;

        public ProcessedEpisode(SeriesInfo ser, Season seas, MyShowItem showItem)
            : base(ser, seas)
        {
            NextToAir = false;
            OverallNumber = -1;
            Ignore = false;
            EpNum2 = EpNum;
            ShowItem = showItem;
        }

        public ProcessedEpisode(ProcessedEpisode other)
            : base(other)
        {
            NextToAir = other.NextToAir;
            EpNum2 = other.EpNum2;
            Ignore = other.Ignore;
            ShowItem = other.ShowItem;
            OverallNumber = other.OverallNumber;
        }

        public ProcessedEpisode(Episode e, MyShowItem showItem)
            : base(e)
        {
            OverallNumber = -1;
            NextToAir = false;
            EpNum2 = EpNum;
            Ignore = false;
            ShowItem = showItem;
        }

        public string NumsAsString() {
            if (EpNum == EpNum2)
                return EpNum.ToString();
            return EpNum + "-" + EpNum2;
        }

        [SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        public static int DVDOrderSorter(ProcessedEpisode e1, ProcessedEpisode e2)
        {
            var ep1 = e1.EpNum;
            var ep2 = e2.EpNum;

            const string key = "DVD_episodenumber";
            if (e1.Items.ContainsKey(key) && e2.Items.ContainsKey(key))
            {
                string n1 = e1.Items[key];
                string n2 = e2.Items[key];
                if ((!string.IsNullOrEmpty(n1)) && (!string.IsNullOrEmpty(n2)))
                {
                    try
                    {
                        int t1 = (int) (1000.0 * double.Parse(n1));
                        int t2 = (int) (1000.0 * double.Parse(n2));
                        ep1 = t1;
                        ep2 = t2;
                    }
                    catch (FormatException)
                    {
                    }
                }
            }

            return ep1 - ep2;
        }
    }
}
